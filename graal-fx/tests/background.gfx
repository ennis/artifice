
// makes the Vertex and BackgroundShaderInterface types visible in the current file.
use crate::Vertex;
use crate::BackgroundShaderInterface;


// Defines a variable. Objects that depend on the value of the variable are automatically
// invalidated when this value changes.
pub output_size : u32x2;

// This variable is private to the specified module.
// Its value is derived from another variable, which means
// that objects that use this variable are invalidated when `output_size` changes.
half_output_size : u32x2 = u32x2(output_size.x / 2, output_size.y / 2);

// Another public variable. Native vulkan types are available under the vk namespace.
pub output_format : format;
pub output_sample_count : u32x2;

// Defines a constant.
const MY_CONSTANT : i32 = 0;

// Defines a vulkan renderpass object.
// graal-fx provides a simplified syntax to create render passes, which is different from
// other variables.
pub RenderPass background_render_pass {
    Attachment color {
        flags          = MAY_ALIAS;       // shorthand: no need for the full qualified path (vk::AttachmentDescriptionFlags::MAY_ALIAS)
        format         = <output_format>; // this makes the object depend on the value of the variable
        samples        = <output_sample_count>;
        loadOp         = DONT_CARE;
        storeOp        = STORE;
        stencilLoadOp  = DONT_CARE;
        stencilStoreOp = DONT_CARE;
        initialLayout  = COLOR_ATTACHMENT_OPTIMAL;
        finalLayout    = COLOR_ATTACHMENT_OPTIMAL;
    }

    Subpass sp0 {

    }
}

// Defines a vulkan renderpass object *template*. It takes two parameters.
// To instantiate the template, use the following syntax:
// ```
// single_buffer_render_pass(<output_format>, <output_sample_count>)
// ```
pub RenderPass single_buffer_render_pass
{
    Attachment color {
        flags            = MAY_ALIAS;
        format           = <output_format>;
        samples          = <output_sample_count>*2;
        load_op          = DONT_CARE;
        store_op         = STORE;
        stencil_load_op  = DONT_CARE;
        stencil_store_op = DONT_CARE;
        initial_layout   = COLOR_ATTACHMENT_OPTIMAL;
        final_layout     = COLOR_ATTACHMENT_OPTIMAL;
    }

    Subpass sp0 {
        pipeline_bind_point  = GRAPHICS;
        color_attachments    = [(<color>, COLOR_ATTACHMENT_OPTIMAL)];   // (attachment ref, layout) tuples
    }


}
